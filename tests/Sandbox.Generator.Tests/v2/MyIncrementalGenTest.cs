using Microsoft.CodeAnalysis;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Threading.Tasks;
using Xunit;

namespace Sandbox.Generator.Tests.v2
{
    public sealed class MyIncrementalGenTest
    {
        private readonly Assembly[] _referencedAssemblies;

        public MyIncrementalGenTest()
        {
            var dependentAssembly = Assembly.LoadFrom("Sandbox.Generator.SampleClassLibrary.dll");

            _referencedAssemblies = new Assembly[]
            {
                dependentAssembly
            };
        }

        [Fact]
        public async Task PrintMethodsWithMagicAttrTest()
        {
            var inputCode = @"
using System;
using Sandbox.Generator.SampleClassLibrary
namespace MyNamespaceB
{
    public class FooClassB
    {
        [MyMagic]
        public void FooMethodB1() { }
    }
    public class BarClassC
    {
        public void BarMethod2() { }

        [MyMagic]
        public void BarMethod3() { }
    }
}
".Replace("'", "\"\"");

            string expectedOutput = $$"""
// <auto-generated/>
// Printing methods with magic attribute
// Total methods: 3
// FooMethodB1
// BarMethod3
// MyLibraryMethod

""";

            var expectedDiagnosticResults = new List<(DiagnosticDescriptor Descriptor, string Message)>
            {
            };

            await RunTestAsync(_referencedAssemblies, inputCode, expectedOutput, expectedDiagnosticResults);

            var (diagnosticEntries, generatedSourceEntries) = await RoslynTestUtils.RunGenerator(
    new MyIncrementalGenerator(),
    _referencedAssemblies,
    new[] { inputCode }).ConfigureAwait(false);

            var actualSourceText = generatedSourceEntries.FirstOrDefault().SourceText?.ToString();
            Assert.Equal(expectedOutput, actualSourceText);

            Assert.Empty(diagnosticEntries);
        }

        private async Task RunTestAsync(IEnumerable<Assembly> assemblyReferences,
               string inputSource,
               string? expectedOutput,
               IReadOnlyList<(DiagnosticDescriptor Descriptor, string Message)>? expectedDiagnostics = null)
        {
            var (diagnosticEntries, generatedSourceEntries) = await RoslynTestUtils.RunGenerator(
                new MyIncrementalGenerator(),
                assemblyReferences,
                new[] { inputSource }).ConfigureAwait(false);


            if (expectedOutput is not null)
            {
                Assert.Single(generatedSourceEntries);
            }

            var actualSourceText = generatedSourceEntries.FirstOrDefault().SourceText?.ToString();
            Assert.Equal(expectedOutput, actualSourceText);
        }
    }
}