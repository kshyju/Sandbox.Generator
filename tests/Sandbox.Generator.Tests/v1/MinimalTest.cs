using System.Collections.Immutable;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Sandbox.Generator.V1;
using Xunit;

namespace Sandbox.Generator.Tests.v1
{
    public sealed class MinimalGeneratorTests
    {
        [Fact]
        public async Task PrintTopLevelNamespacesTest()
        {
            var mainCode = @"
namespace ConsoleApp22
{
    internal class Program
    {
        static void Main(string[] args)
        {
        }
    }
}";

            AdhocWorkspace workspace = new AdhocWorkspace();
            var projectId = ProjectId.CreateNewId();
            var projectInfo = ProjectInfo.Create(
                projectId,
                VersionStamp.Default,
                "MyProject",
                "MyProject",
                LanguageNames.CSharp,
                parseOptions: new CSharpParseOptions(LanguageVersion.CSharp9),
                compilationOptions: new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary)
                    .WithMetadataImportOptions(MetadataImportOptions.All)
                    .WithPlatform(Platform.AnyCpu)
                    .WithOptimizationLevel(OptimizationLevel.Release)
                    .WithWarningLevel(0)
                    .WithOutputKind(OutputKind.DynamicallyLinkedLibrary)
                    .WithNullableContextOptions(NullableContextOptions.Enable));

            var solution = workspace
                .CurrentSolution
                .AddProject(projectInfo)
                .AddDocument(DocumentId.CreateNewId(projectId), "MyFile.cs", mainCode)
                .AddMetadataReference(projectId, MetadataReference.CreateFromFile(typeof(object).Assembly.Location));

            var project = solution.GetProject(projectId)!;
            var compilation = await project.GetCompilationAsync();

            // Validate that there are no diagnostics in the compilation
            Assert.Empty(compilation!.GetDiagnostics());

            // Run the generator and update the compilation
            var sourceGenerators = ImmutableArray.Create<ISourceGenerator>(new MinimalSourceGenerator());
            var driver = CSharpGeneratorDriver.Create(
                sourceGenerators,
                project.AnalyzerOptions.AdditionalFiles,
                (CSharpParseOptions)project.ParseOptions!,
                project.AnalyzerOptions.AnalyzerConfigOptionsProvider);

            driver.RunGeneratorsAndUpdateCompilation(compilation, out var outputCompilation, out var diagnostics);

            // Validate that there are no diagnostics after running the generator
            Assert.Empty(diagnostics);

            // Get the text of the generated code
            var generatedCode = outputCompilation.SyntaxTrees.Last().ToString();

            // Define the expected output
            var expectedOutput = @"// <auto-generated/>
using System;
namespace Foo
{
    public partial class Bar
    {
        public void Baz()
        {
        }
    }
}";

            // Compare the generated code with the expected output
            Assert.Equal(expectedOutput, generatedCode);
        }
    }
}
