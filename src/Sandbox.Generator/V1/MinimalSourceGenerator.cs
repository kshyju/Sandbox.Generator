using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using System.Linq;
using System.Text;

namespace Sandbox.Generator.V1
{
    [Generator(LanguageNames.CSharp)]
    public sealed class MinimalSourceGenerator : ISourceGenerator
    {
        public void Execute(GeneratorExecutionContext context)
        {
            string output = new Emitter(context).Emit();

            var sourceText = SourceText.From(output, encoding: Encoding.UTF8, checksumAlgorithm: SourceHashAlgorithm.Sha1);
            context.AddSource($"MyMinimalGeneratedFile.g.cs", sourceText);
        }

        public void Initialize(GeneratorInitializationContext context)
        {
        }

        internal sealed class Emitter
        {
            private readonly Compilation _compilation;
            internal Emitter(GeneratorExecutionContext context)
            {
                _compilation = context.Compilation;
            }

            internal string Emit()
            {
                var namespaceSymbols = _compilation.GlobalNamespace.GetNamespaceMembers().ToArray();

                StringBuilder sb = new();
                foreach (var ns in namespaceSymbols)
                {
                    sb.AppendLine($"// {ns.Name}");
                }

                return $$"""
// <auto-generated/>
// Printing only top level namespaces in the compilation
// Total Namespaces {{namespaceSymbols.Length}}
{{sb}}
""";
            }
        }
    }
}